#! /usr/bin/env bash

panic()
{
	echo "FATAL ERROR: $@" 1>&2
	exit 1
}

usage()
{
	echo "BAD USAGE: $@" 1>&2
	cat <<- EOF
	usage: $0 [options]
	options:
	-d sde_top_dir
	    Set the top-level directory to top_dir.
	-e default_environment
	    Set the default environment to default_environment.
	-f
	    Allow the use of an existing directory.
	examples:
	    ./installer -d /usr/local/sde -e default
	EOF
	exit 2
}

eprint()
{
	echo "$@" 1>&2
}

cmd_dir=$(dirname $0) || panic "cannot get command directory"
bin_dir="$cmd_dir/bin"

default_environment=
force=0
sde_top_dir=""

while getopts d:fe: opt; do
	case "$opt" in
	d)
		sde_top_dir="$OPTARG";;
	e)
		default_environment="$OPTARG";;
	f)
		force=1;;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$sde_top_dir" ]; then
	usage "no top directory specified"
fi

if [ "$force" -eq 0 -a -d "$sde_top_dir" ]; then
	panic "top directory already exists $sde_top_dir"
fi

cat <<- EOF
============================================================
Starting SDE Installation
Time: $(date +"%Y-%m-%d %H:%M:%S")
============================================================
EOF

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

"$bin_dir/install_packages" -d "$sde_top_dir" || \
  panic "package installation failed"

opts=()
if [ -n "$default_environment" ]; then
	opts+=(-e "$default_environment")
fi
"$bin_dir/install_sde" -d "$sde_top_dir" "${opts[@]}" || \
  panic "SDE installation failed"

cat <<- EOF
============================================================
SDE installation complete
Time: $(date +"%Y-%m-%d %H:%M:%S")
============================================================
EOF
