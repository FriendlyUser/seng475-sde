#! /bin/bash

cmd_dir=$(dirname "$0") || exit 1

panic()
{
	echo "ERROR: $@"
	exit 1
}

usage()
{
	echo "BAD USAGE: $@"
	exit 2
}

sde_top_dir=""
while getopts d: opt; do
	case "$opt" in
	d)
		sde_top_dir="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$sde_top_dir" ]; then
	usage "no top directory specified"
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

packages_dir="$sde_top_dir/packages"
boot_dir="$sde_top_dir/bootstrap"

cmake_version=3.7.1
gcc_version=6.3.0
clang_version=3.9.1
jasper_version=2.0.6
gdb_version=7.12
spl_version=2.0.4

install_cmake="$cmd_dir/install_cmake"
install_gcc="$cmd_dir/install_gcc"
install_clang="$cmd_dir/install_clang"
install_texlive="$cmd_dir/install_texlive"
install_jasper="$cmd_dir/install_jasper"
install_gdb="$cmd_dir/install_gdb"

cmake_dir="$packages_dir/cmake-$cmake_version"
gcc_dir="$packages_dir/gcc-$gcc_version"
clang_dir="$packages_dir/clang-$clang_version"
texlive_dir="$packages_dir/texlive"
jasper_dir="$packages_dir/jasper-$jasper_version"
gdb_dir="$packages_dir/gdb-$gdb_version"
aristotle_bin_dir="$packages_dir/aristotle/bin"

# Since some software requires CMake to build, install CMake before
# building other software.

if [ ! -d "$cmake_dir" ]; then
	"$install_cmake" -v "$cmake_version" -d "$cmake_dir" || \
	  panic "cannot install cmake"
fi

if [ ! -d "$boot_dir" ]; then
	mkdir -p "$boot_dir" || panic "cannot make directory $boot_dir"
fi
if [ -e "$boot_dir/cmake" ]; then
	rm -f "$boot_dir/cmake"
fi
ln -s ../packages/cmake-$cmake_version/bin/cmake "$boot_dir" || \
  panic "cannot make symbolic link for cmake"

path="$boot_dir:$PATH"
export PATH="$path"

if [ ! -d "$gcc_dir" ]; then
	"$install_gcc" -v "$gcc_version" -d "$gcc_dir" || \
	  panic "cannot install gcc"
fi

if [ 0 -ne 0 ]; then
	for file in gcc g++; do
		dest_file="$boot_dir/$file"
		if [ ! -e "$dest_file" ]; then
			ln -s "../packages/gcc-$gcc_version/bin/$file" "$dest_file" || \
			  panic "cannot make symbolic link for $file"
		fi
	done
	export CC="$sde_top_dir/bootstrap/gcc"
	export CXX="$sde_top_dir/bootstrap/g++"
fi

if [ ! -d "$clang_dir" ]; then
	"$install_clang" -v "$clang_version" -d "$clang_dir" || \
	  panic "cannot install clang"
fi

if [ ! -d "$gdb_dir" ]; then
	"$install_gdb" -v "$gdb_version" -d "$gdb_dir" || \
	  panic "cannot install gdb"
fi

if [ ! -d "$texlive_dir" ]; then
	"$install_texlive" -d "$texlive_dir" || \
	  panic "cannot install texlive"
fi
for file in latex pdflatex; do
	target_file="$boot_dir/$file"
	if [ -e "$target_file" ]; then
		rm -f "$target_file"
	fi
	ln -s "../packages/texlive/2016/bin/x86_64-linux/$file" "$target_file" || \
	  panic "link failed"
done

# JasPer might need a more recent LaTeX version
# Install JasPer after LaTeX.
if [ ! -d "$jasper_dir" ]; then
	"$install_jasper" -v "$jasper_version" -d "$jasper_dir" || \
	  panic "cannot install jasper"
fi

if [ ! -d "$spl_dir" ]; then
	"$install_spl" -v "$spl_version" -d "$spl_dir" || \
	  panic "cannot install SPL"
fi


if [ ! -d "$aristotle_bin_dir" ]; then
	mkdir -p "$aristotle_bin_dir" || \
	  panic "cannot make directory $aristotle_bin_dir"
fi

