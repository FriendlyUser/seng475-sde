#! /usr/bin/env bash

cmd_dir=$(dirname "$0") || exit 1

panic()
{
	echo "ERROR: $@"
	exit 1
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "BAD USAGE: $@"
	fi
	cat <<- EOF
	usage: $0 [options]

	Install the packages for the SDE.
	The -d option must be specified.

	Options:
	-h
	    Print help information and exit.
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	EOF
	exit 2
}

sde_config="$cmd_dir/sde_config"

sde_top_dir=""

while getopts d:h opt; do
	case "$opt" in
	d)
		sde_top_dir="$OPTARG";;
	h)
		usage;;
	\?)
		usage;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$sde_top_dir" ]; then
	usage "no top directory specified"
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

if [ -n "$SDE_TEXLIVE_INSTALL" ]; then
	enable_texlive_install="$SDE_TEXLIVE_INSTALL"
else
	enable_texlive_install=1
fi

packages_dir="$sde_top_dir/packages"
boot_dir="$sde_top_dir/bootstrap"

cmake_version=3.9.4
gcc_version=7.2.0
clang_version=5.0.0
jasper_version=2.0.14
gdb_version=8.0.1
spl_version=2.0.6
ndiff_version=2.00
texlive_version=2017
boost_version=1.65.1

install_cmake="$cmd_dir/install_cmake"
install_gcc="$cmd_dir/install_gcc"
install_clang="$cmd_dir/install_clang"
install_boost="$cmd_dir/install_boost"
install_texlive="$cmd_dir/install_texlive"
install_jasper="$cmd_dir/install_jasper"
install_gdb="$cmd_dir/install_gdb"
install_spl="$cmd_dir/install_spl"
install_ndiff="$cmd_dir/install_ndiff"

cmake_dir="$packages_dir/cmake-$cmake_version"
gcc_dir="$packages_dir/gcc-$gcc_version"
gcc_bin_dir="$gcc_dir/bin"
clang_dir="$packages_dir/clang-$clang_version"
boost_dir="$packages_dir/boost-$boost_version"
texlive_dir="$packages_dir/texlive-$texlive_version"
jasper_dir="$packages_dir/jasper-$jasper_version"
gdb_dir="$packages_dir/gdb-$gdb_version"
spl_dir="$packages_dir/SPL-$spl_version"
ndiff_dir="$packages_dir/ndiff-$ndiff_version"
aristotle_bin_dir="$packages_dir/aristotle/bin"

# Since some software requires CMake to build, install CMake before
# building other software.

if [ -n "$cmake_dir" ]; then
	if [ ! -d "$cmake_dir" ]; then
		"$install_cmake" -v "$cmake_version" -d "$cmake_dir" || \
		  panic "cannot install cmake"
	fi
	"$sde_config" -d "$sde_top_dir" -p cmake -v "$cmake_version" || \
	  panic "cannot configure cmake"

	if [ ! -d "$boot_dir" ]; then
		mkdir -p "$boot_dir" || panic "cannot make directory $boot_dir"
	fi
	target_file="$boot_dir/cmake"
	if [ -L "$target_file" -o -e "$target_file" ]; then
		rm -f "$target_file" || panic "cannot remove file $target_file"
	fi
	ln -s ../packages/cmake-$cmake_version/bin/cmake "$target_file" || \
	  panic "cannot make symbolic link for cmake"
fi

path="$boot_dir:$PATH"
export PATH="$path"

if [ -n "$gcc_dir" ]; then
	if [ ! -d "$gcc_dir" ]; then
		"$install_gcc" -v "$gcc_version" -d "$gcc_dir" || \
		  panic "cannot install gcc"
	fi
	"$sde_config" -d "$sde_top_dir" -p gcc -v "$gcc_version" || \
	  panic "cannot configure gcc"
fi

if [ -n "$clang_dir" ]; then
	if [ ! -d "$clang_dir" ]; then
		# Try to compile Clang with Clang if it is available.
		#compiler_name="Clang"
		#cpp_compiler_command=$(type -P clang++) || cpp_compiler_command=""
		#c_compiler_command=$(type -P clang) || c_compiler_command=""
		compiler_name="Previously-Installed GCC"
		cpp_compiler_command=$(type -P g++) || cpp_compiler_command=""
		c_compiler_command=$(type -P gcc) || c_compiler_command=""
		if [ -z "$cpp_compiler_command" -o -z "$c_compiler_command" ]; then
			# Use SDE-installed version of GCC to build Clang.
			compiler_name="SDE-installed GCC"
			cpp_compiler_command="$gcc_dir/bin/g++"
			c_compiler_command="$gcc_dir/bin/gcc"
		fi
		echo "Building Clang with $compiler_name"
		CXX="$cpp_compiler_command" CC="$c_compiler_command" \
		"$install_clang" -l -v "$clang_version" -d "$clang_dir" -f || \
		  panic "cannot install clang"
	fi
	"$sde_config" -d "$sde_top_dir" -p clang -v "$clang_version" || \
	  panic "cannot configure clang"
fi

if [ -n "$boost_dir" ]; then
	if [ ! -d "$boost_dir" ]; then
		"$install_boost" -v "$boost_version" -d "$boost_dir" || \
		  panic "cannot install boost"
	fi
	"$sde_config" -d "$sde_top_dir" -p boost -v "$boost_version" || \
	  panic "cannot configure boost"
fi

if [ -n "$gdb_dir" ]; then
	if [ ! -d "$gdb_dir" ]; then
		"$install_gdb" -v "$gdb_version" -d "$gdb_dir" || \
		  panic "cannot install gdb"
	fi
	"$sde_config" -d "$sde_top_dir" -p gdb -v "$gdb_version" || \
	  panic "cannot configure gdb"
fi

if [ "$enable_texlive_install" -ne 0 ]; then
	if [ ! -d "$texlive_dir" ]; then
		"$install_texlive" -v "$texlive_version" -d "$texlive_dir" || \
		  panic "cannot install texlive"
	fi
	"$sde_config" -d "$sde_top_dir" -p texlive -v "$texlive_version" || \
	  panic "cannot configure texlive"
fi
texlive_bin_dir="$texlive_dir/bin"

# JasPer might need a more recent LaTeX version
# Install JasPer after LaTeX.
if [ -n "$jasper_dir" -a -d "$texlive_dir" ]; then
	if [ ! -d "$jasper_dir" ]; then
		PATH="$texlive_bin_dir:$PATH" \
		  "$install_jasper" -v "$jasper_version" -d "$jasper_dir" || \
		  panic "cannot install jasper"
	fi
	"$sde_config" -d "$sde_top_dir" -p jasper -v "$jasper_version" || \
	  panic "cannot configure jasper"
fi

if [ -n "$spl_dir" -a -d "$texlive_dir" ]; then
	if [ ! -d "$spl_dir" ]; then
		PATH="$gcc_bin_dir:$texlive_bin_dir:$PATH" \
		  "$install_spl" -v "$spl_version" -d "$spl_dir" || \
		  panic "cannot install SPL"
	fi
	"$sde_config" -d "$sde_top_dir" -p SPL -v "$spl_version" || \
	  panic "cannot configure SPL"
fi

if [ -n "$ndiff_dir" ]; then
	if [ ! -d "$ndiff_dir" ]; then
		"$install_ndiff" -v "$ndiff_version" -d "$ndiff_dir" || \
		  panic "cannot install ndiff"
	fi
	"$sde_config" -d "$sde_top_dir" -p ndiff -v "$ndiff_version" || \
	  panic "cannot configure ndiff"
fi

if [ -n "$aristotle_bin_dir" ]; then
	if [ ! -d "$aristotle_bin_dir" ]; then
		mkdir -p "$aristotle_bin_dir" || \
		  panic "cannot make directory $aristotle_bin_dir"
	fi
fi
