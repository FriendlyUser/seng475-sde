#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "FATAL ERROR: $@" 1>&2
	exit 1
}

eprint()
{
	echo "$@" 1>&2
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-n env
	    Set the environment to env.
	-f
	    Allow use of command from within SDE environment.
	EOF
	exit 2
}

cmd_dir=`dirname $0` || panic "cannot get command directory"
top_dir="$cmd_dir/.."
bashrc="$cmd_dir/sde_shell_bashrc"
setup="$cmd_dir/sde_setup"
make_setup="$cmd_dir/sde_make_setup"

force=0
name=
while getopts n:f opt; do
	case "$opt" in
	n)
		name="$OPTARG";;
	f)
		force=1;;
	*)
		usage "invalid option $opt";;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
	usage "unexpected arguments $@"
fi

if [ -n "$SDE_NAME" -a "$force" -eq 0 ]; then
	panic "nesting of SDE environments is disallowed"
fi

shell=`basename "$SHELL"` || panic "cannot get shell"

make_setup_opts=()
make_setup_opts+=(-f)
if [ -n "$name" ]; then
	make_setup_opts+=(-n "$name")
fi
#eval $($make_setup "${make_setup_opts[@]}" -s bash) || panic "eval failed"
buffer=$($make_setup "${make_setup_opts[@]}" -s bash) || \
  panic "sde_make_setup failed"
eval "$buffer" || panic "eval failed"

motd_file="$top_dir/etc/motd"
if [ -f "$motd_file" ]; then
	cat "$motd_file"
fi

case "$shell" in
bash)
	"$SHELL" --init-file $bashrc -i
	;;
csh|tcsh)
	"$shell" -i
	;;
*)
	eprint "The shell $SHELL is not supported."
	bash=`which bash` || panic "cannot find bash shell"
	eprint "Using shell $bash instead."
	eprint "It is recommended that you ask the system administrator to change your login shell to bash."
	"$bash" --init-file $bashrc -i
	;;
esac
