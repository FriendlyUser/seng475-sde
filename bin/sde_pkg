#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "ERROR: $@"
	exit 1
}

usage()
{
	echo "bad usage: $@"
	exit 2
}

sde_root_dir="${SDE_TOP_DIR}"

while getopts d: opt; do
	case "$opt" in
	d)
		sde_root_dir="$OPTARG";;
	*)
		usage "invalid option";;
	esac
done
shift $((OPTIND - 1))

if [ -z "$sde_root_dir" ]; then
	usage "no SDE root directory specified"
fi

if [ $# -eq 2 ]; then
	package="$1"
	version="$2"
	modify=1
elif [ $# -eq 1 ]; then
	package="$1"
	modify=0
else
	usage "invalid usage"
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
umask 022

packages_dir="$sde_root_dir/packages"
package_symlink="$packages_dir/$package"

if [ "$modify" -ne 0 ]; then
	# Ensure that the specified version of the package exists.
	if [ ! -e "$packages_dir/$package-$version" ]; then
		panic "version $version of package $package does not exist"
	fi
	# Remove the old link for the package.
	if [ -L "$package_symlink" ]; then
		rm -f "$package_symlink" || panic "cannot remove $package_symlink"
	fi
	# Create a link for the specified version of the package.
	ln -s "$package-$version" "$package_symlink" || \
	  panic "cannot make symbolic link $package_symlink"
else
	if [ ! -L "$package_symlink" ]; then
		if [ -e "$package_symlink" ]; then
			panic "not a package"
		fi
		panic "no selected version"
	fi
	target=$(readlink "$package_symlink") || panic "cannot read symlink"
	echo "$target"
fi
